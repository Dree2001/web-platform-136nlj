/* Apply a box-sizing reset for all elements */
*,
*::after,
*::before {
  box-sizing: border-box;
}

/* Reset margin for the body element */
body {
  margin: 0;
}

/* Define custom CSS variables for reusability */
:root {
  --bar-width: 60px;
  --bar-height: 8px;
  --hamburger-gap: 6px;
  --foreground: #333;
  --background: white;
  --hamburger-margin: 8px;
  --animation-timing: 200ms ease-in-out;
  --hamburger-height: calc(var(--bar-height) * 3 + var(--hamburger-gap) * 2);
  --x-width: calc(var(--hamburger-height) * 1.41421356237);
}

/* Style for the hamburger menu */
.hamburger-menu {
  display: flex;
  flex-direction: column;
  gap: var(--hamburger-gap);
  width: max-content;
  position: absolute;
  top: var(--hamburger-margin);
  left: var(--hamburger-margin);
  z-index: 2;
  cursor: pointer;
}

/* Style for the hamburger menu when checked */
.hamburger-menu:has(input:checked) {
  --foreground: white;
  --background: #333;
}

/* Style for input elements with focus */
.hamburger-menu:has(input:focus-visible)::before,
.hamburger-menu:has(input:focus-visible)::after,
.hamburger-menu input:focus-visible {
  border: 1px solid var(--background);
  box-shadow: 0 0 0 1px var(--foreground);
}

/* Style for hamburger bars */
.hamburger-menu::before,
.hamburger-menu::after,
.hamburger-menu input {
  content: "";
  width: var(--bar-width);
  height: var(--bar-height);
  background-color: var(--foreground);
  border-radius: 9999px;
  transform-origin: left center;
  transition: opacity var(--animation-timing), width var(--animation-timing), rotate var(--animation-timing), translate var(--animation-timing), background-color var(--animation-timing);
}

/* Style for the hamburger input */
.hamburger-menu input {
  appearance: none;
  padding: 0;
  margin: 0;
  outline: none;
  pointer-events: none;
}

/* Style for the top bar when the input is checked */
.hamburger-menu:has(input:checked)::before {
  rotate: 45deg;
  width: var(--x-width);
  translate: 0 calc(var(--bar-height) / -2);
}

/* Style for the bottom bar when the input is checked */
.hamburger-menu:has(input:checked)::after {
  rotate: -45deg;
  width: var(--x-width);
  translate: 0 calc(var(--bar-height) / 2);
}

/* Style for the input when checked */
.hamburger-menu input:checked {
  opacity: 0;
  width: 0;
}

/* Style for the sidebar */
.sidebar {
  transition: transform var(--animation-timing);
  transform: translateX(-100%);
  padding: 0.5rem 1rem;
  padding-top: calc(var(--hamburger-height) + var(--hamburger-margin) + 1rem);
  background-color: var(--foreground);
  color: var(--background);
  max-width: 10rem;
  min-height: 100vh;
}

/* Show sidebar when input is checked */
.hamburger-menu:has(input:checked) + .sidebar {
  transform: translateX(0);
}

/* Reset default styles for specific elements */
body, h1, h2, h3, p, ul, li {
  margin: 0;
  padding: 0;
}

/* Style for the entire page */
body {
  font-family: Arial, sans-serif;
  background-color: #f0f0f0;
  margin: 0;
  padding: 0;
}

/* Style for the header section */
header {
  background-color: #333;
  color: #fff;
  padding: 20px;
  text-align: center;
}

/* Style for the header text */
header h1 {
  font-size: 36px;
}

/* Style for the navigation menu */
nav {
  margin-top: 20px;
}

nav a {
  color: #fff;
  text-decoration: none;
  margin-right: 20px;
}

/* Style for sections on the page */
section {
  background-color: #fff;
  padding: 25px;
  margin: 40px;
  border-radius: 10px;
  display: flex;
  flex-direction: column;
  align-items: center;
}

/* Style for section headings */
section h2 {
  color: #007acc;
}
